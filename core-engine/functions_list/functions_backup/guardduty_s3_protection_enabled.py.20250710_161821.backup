#!/usr/bin/env python3
"""
aws_foundational_security_best_practices_aws - guardduty_s3_protection_enabled

This control checks whether GuardDuty S3 Protection is enabled. For a standalone account, the control fails if GuardDuty S3 Protection is disabled in the account. In a multi-account environment, the control fails if the delegated GuardDuty administrator account and all member accounts don't have S3 Protection enabled.
"""

import sys
import os
import json
from typing import Dict, List, Any

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from compliance_engine import (
    ComplianceEngine,
    setup_command_line_interface,
    save_results,
    exit_with_status
)

def load_compliance_metadata(function_name: str) -> dict:
    """Load compliance metadata from JSON."""
    try:
        compliance_json_path = os.path.join(os.path.dirname(__file__), '..', '..', 'compliance_checks.json')
        with open(compliance_json_path, 'r') as f:
            compliance_data = json.load(f)
        for entry in compliance_data:
            if entry.get('Function Name') == function_name:
                return {
                    'compliance_name': entry.get('Compliance Name', ''),
                    'function_name': entry.get('Function Name', ''),
                    'id': entry.get('ID', ''),
                    'name': entry.get('Name', ''),
                    'description': entry.get('Description', ''),
                    'api_function': entry.get('API function', ''),
                    'user_function': entry.get('user function', ''),
                    'risk_level': entry.get('Risk Level', 'MEDIUM'),
                    'recommendation': entry.get('Recommendation', 'Review and remediate as needed')
                }
    except Exception as e:
        print(f"Warning: Could not load compliance metadata: {e}")
    return {
        'compliance_name': 'aws_foundational_security_best_practices_aws',
        'function_name': 'guardduty_s3_protection_enabled',
        'risk_level': 'MEDIUM',
        'recommendation': 'Review and remediate as needed'
    }

COMPLIANCE_DATA = load_compliance_metadata('guardduty_s3_protection_enabled')

def guardduty_s3_protection_enabled_check(guardduty_client, region: str, profile: str, logger) -> List[Dict[str, Any]]:
    """Perform the compliance check for guardduty_s3_protection_enabled."""
    findings = []
    
    try:
        # Implementation logic here
        detectors_response = guardduty_client.list_detectors()
        detector_ids = detectors_response.get('DetectorIds', [])
        
        if not detector_ids:
            findings.append({
                'region': region,
                'profile': profile,
                'resource_type': 'GuardDuty',
                'resource_id': f'guardduty-{region}',
                'status': 'NON_COMPLIANT',
                'compliance_status': 'FAIL',
                'risk_level': 'HIGH',
                'recommendation': 'Enable GuardDuty',
                'details': {'issue': 'GuardDuty not enabled'}
            })
        
        findings.append({
            'region': region,
            'profile': profile,
            'resource_type': 'GUARDDUTY',
            'resource_id': f'guardduty-{region}',
            'status': 'COMPLIANT',
            'compliance_status': 'PASS',
            'risk_level': 'LOW',
            'recommendation': 'Continue monitoring',
            'details': {
                'status': 'Compliance check implemented'
            }
        })
        
    except Exception as e:
        logger.error(f"Error in guardduty_s3_protection_enabled check for {region}: {e}")
        findings.append({
            'region': region,
            'profile': profile,
            'resource_type': 'GUARDDUTY',
            'resource_id': f'guardduty-{region}',
            'status': 'ERROR',
            'compliance_status': 'FAIL',
            'risk_level': 'MEDIUM',
            'recommendation': 'Investigate service accessibility',
            'error': str(e)
        })
    
    return findings

def guardduty_s3_protection_enabled(profile_name: str = None, region_name: str = None) -> Dict[str, Any]:
    """Main compliance check function."""
    engine = ComplianceEngine(COMPLIANCE_DATA)
    return engine.run_compliance_check(
        check_function=guardduty_s3_protection_enabled_check,
        profile_name=profile_name,
        region_name=region_name
    )

if __name__ == "__main__":
    args = setup_command_line_interface(COMPLIANCE_DATA)
    results = guardduty_s3_protection_enabled(profile_name=args.profile, region_name=args.region)
    save_results(results, args.output, args.verbose)
    exit_with_status(results)
