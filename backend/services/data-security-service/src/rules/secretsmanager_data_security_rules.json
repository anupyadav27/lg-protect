[
  {
    "Id": "1.1",
    "Description": "Ensure Secrets Manager secrets are not publicly accessible",
    "Checks": ["secretsmanager_secret_not_publicly_accessible"],
    "function_name": "secretsmanager_secret_not_publicly_accessible",
    "title": "Ensure Secrets Manager secrets are not publicly accessible",
    "description": "Ensure Secrets Manager secrets do not have resource policies that grant public access to prevent unauthorized disclosure.",
    "capability": "access_governance",
    "service": "secretsmanager",
    "subservice": "access",
    "risk": "CRITICAL",
    "existing": false,
    "unique_key": "DATASEC_AG_SM_001",
    "Attributes": [
      {
        "Section": "Access Governance",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Automated",
        "Description": "Ensure Secrets Manager secrets do not have resource policies that grant public access to prevent unauthorized disclosure.",
        "RationaleStatement": "Publicly accessible secrets expose sensitive credentials and API keys to unauthorized users, leading to potential data breaches and system compromises.",
        "ImpactStatement": "Public access to secrets could allow attackers to gain unauthorized access to databases, APIs, and other critical systems.",
        "RemediationProcedure": "1. List all secrets: ```aws secretsmanager list-secrets```\n2. Check resource policies: ```aws secretsmanager describe-resource-policy --secret-id <secret-arn>```\n3. Remove public access from resource policies\n4. Update resource policy: ```aws secretsmanager put-resource-policy --secret-id <secret-arn> --resource-policy <updated-policy>```\n5. Verify access is restricted to authorized principals only",
        "AuditProcedure": "1. List all Secrets Manager secrets\n2. Check resource policies for public access patterns\n3. Look for principals containing '*' or allowing anonymous access\n4. Verify resource-based policies don't grant public access\n5. Review CloudTrail logs for unauthorized access attempts",
        "AdditionalInformation": "Monitor secret access with CloudTrail to detect unauthorized access attempts",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-policies.html",
        "DefaultValue": "Secrets Manager secrets are not publicly accessible by default"
      }
    ]
  },
  {
    "Id": "1.2",
    "Description": "Enforce least privilege for Secrets Manager access",
    "Checks": ["secretsmanager_least_privilege_access"],
    "function_name": "secretsmanager_least_privilege_access",
    "title": "Enforce least privilege for Secrets Manager access",
    "description": "Ensure Secrets Manager resource policies and IAM policies follow least privilege principles for secret access.",
    "capability": "access_governance",
    "service": "secretsmanager",
    "subservice": "policy",
    "risk": "HIGH",
    "existing": false,
    "unique_key": "DATASEC_AG_SM_002",
    "Attributes": [
      {
        "Section": "Access Governance",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Manual",
        "Description": "Ensure Secrets Manager resource policies and IAM policies follow least privilege principles for secret access.",
        "RationaleStatement": "Least privilege access reduces the attack surface and limits potential damage from compromised credentials or insider threats.",
        "ImpactStatement": "Excessive permissions on secrets could lead to unauthorized access to sensitive credentials and potential lateral movement in attacks.",
        "RemediationProcedure": "1. Review IAM policies granting Secrets Manager access\n2. Identify over-privileged permissions and users\n3. Create granular policies based on actual usage patterns\n4. Implement condition-based restrictions (IP, time, MFA)\n5. Update resource policies to enforce least privilege\n6. Regular review and cleanup of unused permissions",
        "AuditProcedure": "1. Review IAM policies for Secrets Manager permissions\n2. Analyze CloudTrail logs for actual secret usage patterns\n3. Identify over-privileged users and roles\n4. Verify condition-based restrictions are in place\n5. Check for unused or excessive permissions",
        "AdditionalInformation": "Use IAM Access Analyzer to identify unused permissions and over-privileged access",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html",
        "DefaultValue": "Default IAM policies may grant broad access to secrets"
      }
    ]
  },
  {
    "Id": "1.3",
    "Description": "Restrict cross-account access to secrets",
    "Checks": ["secretsmanager_cross_account_access_restricted"],
    "function_name": "secretsmanager_cross_account_access_restricted",
    "title": "Restrict cross-account access to secrets",
    "description": "Ensure Secrets Manager secrets have appropriate restrictions for cross-account access.",
    "capability": "access_governance",
    "service": "secretsmanager",
    "subservice": "cross_account",
    "risk": "HIGH",
    "existing": false,
    "unique_key": "DATASEC_AG_SM_003",
    "Attributes": [
      {
        "Section": "Access Governance",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Manual",
        "Description": "Ensure Secrets Manager secrets have appropriate restrictions for cross-account access.",
        "RationaleStatement": "Cross-account access without proper restrictions could lead to secret exposure to unauthorized external parties.",
        "ImpactStatement": "Uncontrolled cross-account access could allow external accounts to access sensitive credentials and compromise systems.",
        "RemediationProcedure": "1. Review resource policies for cross-account principals\n2. Validate business justification for cross-account access\n3. Implement specific account restrictions and conditions\n4. Add external ID requirements for cross-account roles\n5. Update resource policy with restricted cross-account access\n6. Monitor cross-account secret access",
        "AuditProcedure": "1. Review resource policies for external account principals\n2. Verify business justification for cross-account access\n3. Check for appropriate conditions and restrictions\n4. Review CloudTrail logs for cross-account secret access\n5. Validate external ID usage for cross-account roles",
        "AdditionalInformation": "Use condition keys like aws:SourceAccount to restrict cross-account access",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-policies.html",
        "DefaultValue": "Cross-account access must be explicitly configured in resource policies"
      }
    ]
  },
  {
    "Id": "2.1",
    "Description": "Enable encryption at rest for Secrets Manager",
    "Checks": ["secretsmanager_encryption_at_rest_enabled"],
    "function_name": "secretsmanager_encryption_at_rest_enabled",
    "title": "Enable encryption at rest for Secrets Manager",
    "description": "Ensure all Secrets Manager secrets are encrypted at rest using customer managed KMS keys.",
    "capability": "data_protection",
    "service": "secretsmanager",
    "subservice": "encryption",
    "risk": "HIGH",
    "existing": false,
    "unique_key": "DATASEC_DP_SM_001",
    "Attributes": [
      {
        "Section": "Data Protection",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Automated",
        "Description": "Ensure all Secrets Manager secrets are encrypted at rest using customer managed KMS keys.",
        "RationaleStatement": "Encryption at rest protects secrets from unauthorized access in case of storage compromise and provides additional security controls.",
        "ImpactStatement": "Unencrypted secrets at rest could be exposed if AWS storage systems are compromised or accessed by unauthorized personnel.",
        "RemediationProcedure": "1. Create customer managed KMS key for Secrets Manager\n2. Update existing secrets to use customer managed key: ```aws secretsmanager update-secret --secret-id <secret-id> --kms-key-id <key-id>```\n3. Configure default encryption key for new secrets\n4. Verify encryption configuration: ```aws secretsmanager describe-secret --secret-id <secret-id>```\n5. Update applications to handle KMS key permissions",
        "AuditProcedure": "1. List all secrets and check encryption configuration\n2. Verify customer managed KMS keys are used\n3. Check KMS key policies for appropriate access\n4. Review CloudTrail for encryption-related activities\n5. Validate encryption at rest for all secrets",
        "AdditionalInformation": "Customer managed keys provide better control and audit capabilities than AWS managed keys",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/security-encryption.html",
        "DefaultValue": "Secrets Manager uses AWS managed keys by default"
      }
    ]
  },
  {
    "Id": "2.2",
    "Description": "Enable automatic rotation for secrets",
    "Checks": ["secretsmanager_automatic_rotation_enabled"],
    "function_name": "secretsmanager_automatic_rotation_enabled",
    "title": "Enable automatic rotation for secrets",
    "description": "Ensure Secrets Manager secrets have automatic rotation enabled where supported.",
    "capability": "data_protection",
    "service": "secretsmanager",
    "subservice": "rotation",
    "risk": "MEDIUM",
    "existing": true,
    "unique_key": "DATASEC_DP_SM_002",
    "Attributes": [
      {
        "Section": "Data Protection",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Automated",
        "Description": "Ensure Secrets Manager secrets have automatic rotation enabled where supported.",
        "RationaleStatement": "Automatic rotation reduces the risk of credential compromise by regularly changing secret values without manual intervention.",
        "ImpactStatement": "Static secrets without rotation pose increased security risk if compromised, as they remain valid until manually changed.",
        "RemediationProcedure": "1. Enable rotation: ```aws secretsmanager rotate-secret --secret-id <secret-id> --rotation-lambda-arn <lambda-arn>```\n2. Configure rotation schedule and Lambda function\n3. Test rotation process in non-production environment\n4. Update applications to handle rotated credentials\n5. Monitor rotation success and failures\n6. Implement alerting for rotation failures",
        "AuditProcedure": "1. List secrets and check rotation configuration\n2. Verify rotation Lambda functions are operational\n3. Review rotation schedules and success rates\n4. Check CloudWatch logs for rotation activities\n5. Validate applications handle rotated credentials correctly",
        "AdditionalInformation": "Rotation is supported for RDS, DocumentDB, and Redshift; custom Lambda required for other services",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html",
        "DefaultValue": "Automatic rotation is disabled by default"
      }
    ]
  },
  {
    "Id": "2.3",
    "Description": "Validate secret value complexity and format",
    "Checks": ["secretsmanager_secret_complexity_validation"],
    "function_name": "secretsmanager_secret_complexity_validation",
    "title": "Validate secret value complexity and format",
    "description": "Ensure Secrets Manager secrets meet complexity requirements and follow secure formatting standards.",
    "capability": "data_protection",
    "service": "secretsmanager",
    "subservice": "complexity",
    "risk": "MEDIUM",
    "existing": false,
    "unique_key": "DATASEC_DP_SM_003",
    "Attributes": [
      {
        "Section": "Data Protection",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Manual",
        "Description": "Ensure Secrets Manager secrets meet complexity requirements and follow secure formatting standards.",
        "RationaleStatement": "Strong secret complexity reduces the risk of brute force attacks and ensures adequate cryptographic strength.",
        "ImpactStatement": "Weak secrets could be easily compromised through brute force or dictionary attacks, leading to system breaches.",
        "RemediationProcedure": "1. Define secret complexity standards for different types\n2. Review existing secrets for compliance with standards\n3. Update weak secrets with stronger values\n4. Implement validation in secret creation workflows\n5. Use Secrets Manager password generation features\n6. Regular audit of secret strength",
        "AuditProcedure": "1. Review secret creation and update procedures\n2. Check for password complexity enforcement\n3. Validate secret generation uses secure methods\n4. Review secret types and appropriate complexity\n5. Audit compliance with organizational standards",
        "AdditionalInformation": "Use Secrets Manager GenerateRandomPassword API for secure password generation",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/generate-random-password.html",
        "DefaultValue": "No default complexity requirements; depends on secret type and creation method"
      }
    ]
  },
  {
    "Id": "3.1",
    "Description": "Ensure secrets are stored in compliant regions",
    "Checks": ["secretsmanager_region_compliance"],
    "function_name": "secretsmanager_region_compliance",
    "title": "Ensure secrets are stored in compliant regions",
    "description": "Ensure Secrets Manager secrets are stored only in regions that meet data residency requirements.",
    "capability": "data_residency",
    "service": "secretsmanager",
    "subservice": "region",
    "risk": "HIGH",
    "existing": false,
    "unique_key": "DATASEC_DR_SM_001",
    "Attributes": [
      {
        "Section": "Data Residency",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Manual",
        "Description": "Ensure Secrets Manager secrets are stored only in regions that meet data residency requirements.",
        "RationaleStatement": "Secrets in unauthorized regions may violate data residency requirements and expose the organization to compliance penalties.",
        "ImpactStatement": "Secrets stored in non-compliant regions could violate data sovereignty laws and regulatory requirements.",
        "RemediationProcedure": "1. Identify secrets in non-compliant regions\n2. Create replacement secrets in approved regions\n3. Update service configurations to use new secrets\n4. Test applications with new secret locations\n5. Delete secrets from non-compliant regions\n6. Implement SCPs to prevent secret creation in unauthorized regions",
        "AuditProcedure": "1. List secrets across all regions\n2. Compare secret locations against approved regions\n3. Review data residency requirements for each secret\n4. Check SCPs for regional restrictions\n5. Verify all applications use compliant secrets",
        "AdditionalInformation": "Use Service Control Policies (SCPs) to prevent secret creation in unauthorized regions",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/service_code_examples.html",
        "DefaultValue": "Secrets can be created in any available region"
      }
    ]
  },
  {
    "Id": "3.2",
    "Description": "Restrict cross-region secret replication",
    "Checks": ["secretsmanager_cross_region_replication_restricted"],
    "function_name": "secretsmanager_cross_region_replication_restricted",
    "title": "Restrict cross-region secret replication",
    "description": "Ensure Secrets Manager secret replication is restricted to compliant regions only.",
    "capability": "data_residency",
    "service": "secretsmanager",
    "subservice": "replication",
    "risk": "HIGH",
    "existing": false,
    "unique_key": "DATASEC_DR_SM_002",
    "Attributes": [
      {
        "Section": "Data Residency",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Manual",
        "Description": "Ensure Secrets Manager secret replication is restricted to compliant regions only.",
        "RationaleStatement": "Secret replication to non-compliant regions may violate data residency policies by storing sensitive data outside approved jurisdictions.",
        "ImpactStatement": "Unauthorized replication could expose secrets to jurisdictions that violate data sovereignty compliance requirements.",
        "RemediationProcedure": "1. Review secret replication configurations\n2. Identify replicas in non-compliant regions\n3. Remove unauthorized replicas: ```aws secretsmanager stop-replication-to-replica --secret-id <secret-id> --replica-region <region>```\n4. Update replication policies to restrict regions\n5. Implement controls to prevent replication to unauthorized regions\n6. Monitor replication activities",
        "AuditProcedure": "1. List all secrets and their replica regions\n2. Verify replica regions meet data residency requirements\n3. Check business justification for each replica location\n4. Review controls preventing unauthorized replication\n5. Monitor CloudTrail for replication events",
        "AdditionalInformation": "Secret replicas are read-only and synchronized with the primary secret",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/create-manage-multi-region-secrets.html",
        "DefaultValue": "Secret replication must be explicitly configured and can target any available region"
      }
    ]
  },
  {
    "Id": "3.3",
    "Description": "Tag secrets with data sovereignty information",
    "Checks": ["secretsmanager_data_sovereignty_tags"],
    "function_name": "secretsmanager_data_sovereignty_tags",
    "title": "Tag secrets with data sovereignty information",
    "description": "Ensure Secrets Manager secrets are tagged with data sovereignty and jurisdiction information for compliance tracking.",
    "capability": "data_residency",
    "service": "secretsmanager",
    "subservice": "tagging",
    "risk": "MEDIUM",
    "existing": false,
    "unique_key": "DATASEC_DR_SM_003",
    "Attributes": [
      {
        "Section": "Data Residency",
        "SubSection": "",
        "Profile": "LGTech",
        "AssessmentStatus": "Manual",
        "Description": "Ensure Secrets Manager secrets are tagged with data sovereignty and jurisdiction information for compliance tracking.",
        "RationaleStatement": "Data sovereignty tags enable automated compliance monitoring and ensure secrets are properly classified for regulatory requirements.",
        "ImpactStatement": "Without proper tagging, it becomes difficult to track compliance with data residency requirements and identify non-compliant secrets.",
        "RemediationProcedure": "1. Define data sovereignty tagging taxonomy\n2. Tag secrets: ```aws secretsmanager tag-resource --secret-id <secret-id> --tags Key=DataSovereignty,Value=<jurisdiction>```\n3. Implement automated tagging for new secrets\n4. Create compliance monitoring based on tags\n5. Regular audit of tagging compliance\n6. Update tags when jurisdiction requirements change",
        "AuditProcedure": "1. List all secrets and their tags\n2. Verify data sovereignty tags are present and accurate\n3. Check consistency with data residency policies\n4. Review automated tagging implementation\n5. Validate compliance monitoring based on tags",
        "AdditionalInformation": "Use consistent tagging strategy across all AWS resources for comprehensive governance",
        "References": "https://docs.aws.amazon.com/secretsmanager/latest/userguide/managing-secrets_tagging.html",
        "DefaultValue": "Secrets are created without data sovereignty tags by default"
      }
    ]
  }
]